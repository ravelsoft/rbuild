{ readFile, writeFile, watchFile, unwatchFile, stat } = require \fs
{ Bundler, BundleFile } = require './bundler'

function writeResult (path, data, cbk)
    (err) <- writeFile path, data, \utf-8
    if err
        console.log "#path: #err"
        return
    cbk?!

/**
 *  @class Task
 */
class Task

    /**
     *  @constructor
     */
    ({ @dependencies ? [], @callback, @watch } ) ->
        @watching = false

    /**
     *
     */
    run: function
        if @watch and not @watching
            @watching = true
            for f of @dependencies
                watchFile f, (curr, prev) ~>
                    if curr.mtime > prev.mtime
                        @callback!
        @callback!

/**
 *  @class TaskPool
 */
class TaskPool

    /**
     *  @constructor
     */
    ({ @watch }) ->
        @tasks = []
    
    /**
     *
     */
    createTaskForFile: function (file, outfile, callback)

        function fileCallback (error)
            (err_in, istat) <- stat file
            (err_out, ostat) <- stat outfile

            if not err_out and istat.mtime <= ostat.mtime
                # Not compiling to a file that is more recent.
                console.log "= #file"
                return

            readFile file, \utf-8, (err, data) ->
                if err
                    console.log "#file: #err"
                    return
                try
                    res = callback data
                    <- writeResult outfile, res
                    console.log "#{new Date!.toLocaleTimeString!} => #file > #outfile"
                catch e
                    console.log "#file: #e"

        return @addTask new Task do
            dependencies: [file]
            callback: fileCallback
            watch: @watch

    /**
     *
     */
    createBundleTask: function (outfile, files, extensions)
        bundler = new Bundler files: files, extensions: extensions
        watched = []
        files = []

        return @addTask new Task do
            dependencies: [] # The bundler does that.
            callback: ~function recompileFiles
                (err, data) <~ bundler.bundle!

                files := (f.realpath for k, f in bundler.modules ? {})

                # Add the files that are not being watched.
                for f of files
                    ((f) ->
                        if f of watched
                            return

                        watchFile f, (cur, prev) ->
                            BundleFile.get f .recompile = true

                            if cur.mtime > prev.mtime and f of files
                                recompileFiles!

                        watched.push f
                    )(f)

                if not err
                    <~ writeResult outfile, data
                    console.log "#{new Date!.toLocaleTimeString!} => rewrote bundle #outfile"

    /**
     *
     */
    addTask: function (task)
        @tasks.push task
        task.watch = @watch
        task.run!
        return task

exports <<< { Task, TaskPool }

