{ exec: exec_child } = require \child_process
{ queue } = require \async
{ readdir, stat, writeFile } = require \fs
url = require \url

{ Bundler } = require './bundler'
{ Task, TaskPool } = require './task'

/**
 *  Execute a command, and call the callback once it's done.
 *
 *  @param command A string with the command
 *  @param callback The callback to call once done.
 */
function exec (command, callback)
    console.log command

    env = {}
    env <<< process.env

    (error, stdout, stderr) <- exec_child command, env: env

    console.log "stderr: #{stderr}" if stderr

    if error is not null
        console.log "EXEC ERROR: #{error}"

    if callback
        callback error, stdout, stderr

/**
 *  Recursively walk down a directory and call the callback
 *  for all or part of its contents.
 *
 *  @param dirname The path to the directory
 *  @param pattern An optional pattern against which filenames
 *      are matched.
 *  @param callback The callback to call whenever we find the files.
 *      (abspath, relpath), where abspath is the absolute path of the
 *      file on the filesystem, and relpath is its relative path
 *      compared to dirname.
 *  @param endcallback the callback to call when the walking is completely over.
 */
function walk (dirname, pattern ? null, callback, endcallback ? null)
    if not callback? and pattern is not null and pattern instanceof Function
        callback = pattern
        pattern = null

    if callback not instanceof Function
        throw new Error "callback should be a function"

    function _walk (dirn, cb)
        (err, files) <- readdir dirn
        for f of files
            abspath = url.resolve process.cwd! + \/, dirn
            abspath = url.resolve abspath + \/, f

            relpath = "#dirn/#f".replace basedir + \/, ''

            if pattern is null or abspath.match pattern
                callback abspath, relpath

            continueIfDirectory = (abspath) ->
                q.push (cb) ->
                    (err, stat) <- stat abspath
                    if stat.isDirectory!
                        q.push (cb) -> 
                            _walk abspath, cb
                    cb!

            continueIfDirectory abspath
        cb!

    q = queue ((task, cb) ->
        task cb
        ), 10

    basedir = url.resolve process.cwd! + \/, dirname

    q.push (cb) ->
        _walk basedir, cb

    q.drain = -> endcallback?!

    q.process!


exports import { exec, walk, Bundler, Task, TaskPool }
